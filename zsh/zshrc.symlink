#!/usr/bin/env zsh

# Uncomment the line below to do profiling
# zmodload zsh/zprof

export DOTFILES=$HOME/.dotfiles
export ZSH=$DOTFILES/zsh
export ZDOTDIR=$HOME/.config/zsh

command_exists() {
	type "$1" > /dev/null 2>&1
}

# Make nvim the default editor
export EDITOR=`which vim`
export USE_EDITOR=$EDITOR
export VISUAL=$EDITOR
export GIT_EDITOR=$EDITOR

# Prefer US English and use UTF-8
export LANG="en_US.UTF-8"
export LC_ALL="en_US.UTF-8"

# Set up terminal and turn on colors
[ -z "$TMUX" ] && export TERM="xterm-256color"

[[ -e ~/.terminfo ]] && export TERMINFO_DIRS=~/.terminfo:/usr/share/terminfo # use modified terminfo before default ones

# Enable truecolor support for ZSH >= 5.7
[[ $COLORTERM = *(24bit|truecolor)* ]] || zmodload zsh/nearcolor

# define the code directory
# This is where my code exists and where I want the `c` autocomplete to work from exclusively
if [[ -d ~/code ]]; then
	export CODE_DIR=~/code
fi

# source all .zsh files inside of the zsh/ directory
for config ($ZSH/**/*.zsh) source $config

if [[ -a ~/.localrc ]]; then
	source ~/.localrc
fi

# install rbenv
if command_exists rbenv; then
	eval "$(command rbenv init -)"
  rbenv "@"
fi

# install pyenv
if command_exists pyenv; then
	eval "$(command pyenv init -)"
  pyenv "@"
fi

cdUndoKey() {
  popd      > /dev/null
  zle       .reset-prompt
  echo
}

cdParentKey() {
  pushd .. > /dev/null
  zle      .reset-prompt
  echo
}

zle -N                 cdParentKey
zle -N                 cdUndoKey
bindkey '^[[1;9A'      cdParentKey
bindkey '^[[1;3D'      cdUndoKey

compinit -u

# This lines stops zplugin from adding its loading to this file as it is handled in zplugin.zsh
